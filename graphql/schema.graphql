type Query {
  "Query to get tracks array for the homepage grid"
  tracks: [Track!]!
  "Fetch a specific track, provided a track's ID"
  track(id: ID!): Track!
  authors: [Author!]!
}

type Mutation {
  "Create track content"
  createTrack(content: InputTrackContent!): MutateTrackResponse!
  "Update track content"
  updateTrack(id: ID!, content: InputTrackContent!): MutateTrackResponse!
}

input InputTrackContent {
  title: String!
  description: String
  numberOfViews: Int
}

type MutateTrackResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly updated track after a successful mutation"
  track: Track
}

"A track is a group of Modules that teaches about a specific topic"
type Track {
  id: ID!
  title: String!
  numberOfViews: Int
  description: String
}

"Author of a complete Track or a Module"
type Author {
  id: ID!
  name: String!
}
